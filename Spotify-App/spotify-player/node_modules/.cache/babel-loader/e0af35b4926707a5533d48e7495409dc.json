{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MrMuscle\\\\Desktop\\\\spotifyApp\\\\music-stat-app\\\\src\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport { Container, Form } from \"react-bootstrap\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport Player from \"./Player\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"441bca7af371439ca25719b57bef08b8\"\n});\nexport default function Dashboard({\n  code\n}) {\n  _s();\n\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [playingTrack, setPlayingTrack] = useState();\n  const [lyrics, setLyrics] = useState(\"\");\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch(\"\");\n    setSearch(\"\");\n  } //Effect for retrieving track lyrics via node server API\n\n\n  useEffect(() => {\n    if (!playingTrack) return;\n    axios.get(\"http://localhost:3001/lyrics\", {\n      params: {\n        track: playingTrack.title,\n        artist: playingTrack.artist\n      }\n    }).then(res => {\n      setLyrics(res.data.lyrics);\n    });\n  }, [playingTrack]);\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]); //Effect for retrieving search results and images of tracks\n\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return;\n      setSearchResults(res.body.tracks.items.map(track => {\n        //find smallest image in track object\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    }); //cancels previous search request if new search request is made\n\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"d-flex flex-column py-2\",\n    style: {\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n      type: \"search\",\n      placeholder: \"Search Songs/Artists\",\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow-1 my-2\",\n      style: {\n        overflowY: \"auto\"\n      },\n      children: searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n        track: track,\n        chooseTrack: chooseTrack\n      }, track.uri, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 4\n    }, this), searchResults.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      style: {\n        whiteSpace: \"pre\"\n      },\n      children: lyrics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Player, {\n        accessToken: accessToken,\n        trackUri: playingTrack === null || playingTrack === void 0 ? void 0 : playingTrack.uri\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Dashboard, \"C/xkEiesDpJOEbcaLNXZ/RIs9iE=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/MrMuscle/Desktop/spotifyApp/music-stat-app/src/Dashboard.js"],"names":["useState","useEffect","useAuth","Container","Form","SpotifyWebApi","TrackSearchResult","Player","axios","spotifyApi","clientId","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","playingTrack","setPlayingTrack","lyrics","setLyrics","chooseTrack","track","get","params","title","artist","then","res","data","setAccessToken","cancel","searchTracks","body","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artists","name","uri","albumUrl","url","e","target","value","overflowY","length","whiteSpace"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport useAuth from \"./useAuth\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport TrackSearchResult from \"./TrackSearchResult\";\r\nimport Player from \"./Player\";\r\nimport axios from \"axios\";\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n\tclientId: \"441bca7af371439ca25719b57bef08b8\",\r\n});\r\n\r\nexport default function Dashboard({ code }) {\r\n\tconst accessToken = useAuth(code);\r\n\tconst [search, setSearch] = useState(\"\");\r\n\tconst [searchResults, setSearchResults] = useState([]);\r\n\tconst [playingTrack, setPlayingTrack] = useState();\r\n\tconst [lyrics, setLyrics] = useState(\"\");\r\n\r\n\tfunction chooseTrack(track) {\r\n\t\tsetPlayingTrack(track);\r\n\t\tsetSearch(\"\");\r\n\t\tsetSearch(\"\");\r\n\t}\r\n\r\n\t//Effect for retrieving track lyrics via node server API\r\n\tuseEffect(() => {\r\n\t\tif (!playingTrack) return;\r\n\t\taxios\r\n\t\t\t.get(\"http://localhost:3001/lyrics\", {\r\n\t\t\t\tparams: {\r\n\t\t\t\t\ttrack: playingTrack.title,\r\n\t\t\t\t\tartist: playingTrack.artist,\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t\t.then((res) => {\r\n\t\t\t\tsetLyrics(res.data.lyrics);\r\n\t\t\t});\r\n\t}, [playingTrack]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!accessToken) return;\r\n\t\tspotifyApi.setAccessToken(accessToken);\r\n\t}, [accessToken]);\r\n\r\n\t//Effect for retrieving search results and images of tracks\r\n\tuseEffect(() => {\r\n\t\tif (!search) return setSearchResults([]);\r\n\t\tif (!accessToken) return;\r\n\r\n\t\tlet cancel = false;\r\n\t\tspotifyApi.searchTracks(search).then((res) => {\r\n\t\t\tif (cancel) return;\r\n\t\t\tsetSearchResults(\r\n\t\t\t\tres.body.tracks.items.map((track) => {\r\n\t\t\t\t\t//find smallest image in track object\r\n\t\t\t\t\tconst smallestAlbumImage = track.album.images.reduce(\r\n\t\t\t\t\t\t(smallest, image) => {\r\n\t\t\t\t\t\t\tif (image.height < smallest.height) return image;\r\n\t\t\t\t\t\t\treturn smallest;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\ttrack.album.images[0]\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tartist: track.artists[0].name,\r\n\t\t\t\t\t\ttitle: track.name,\r\n\t\t\t\t\t\turi: track.uri,\r\n\t\t\t\t\t\talbumUrl: smallestAlbumImage.url,\r\n\t\t\t\t\t};\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t});\r\n\t\t//cancels previous search request if new search request is made\r\n\t\treturn () => (cancel = true);\r\n\t}, [search, accessToken]);\r\n\r\n\treturn (\r\n\t\t<Container className='d-flex flex-column py-2' style={{ height: \"100vh\" }}>\r\n\t\t\t<Form.Control\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='Search Songs/Artists'\r\n\t\t\t\tvalue={search}\r\n\t\t\t\tonChange={(e) => setSearch(e.target.value)}\r\n\t\t\t/>\r\n\t\t\t<div className='flex-grow-1 my-2' style={{ overflowY: \"auto\" }}>\r\n\t\t\t\t{searchResults.map((track) => (\r\n\t\t\t\t\t<TrackSearchResult\r\n\t\t\t\t\t\ttrack={track}\r\n\t\t\t\t\t\tkey={track.uri}\r\n\t\t\t\t\t\tchooseTrack={chooseTrack}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t{searchResults.length === 0 && (\r\n\t\t\t\t<div className='text-center' style={{ whiteSpace: \"pre\" }}>\r\n\t\t\t\t\t{lyrics}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t<div>\r\n\t\t\t\t<Player accessToken={accessToken} trackUri={playingTrack?.uri} />\r\n\t\t\t</div>\r\n\t\t</Container>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}