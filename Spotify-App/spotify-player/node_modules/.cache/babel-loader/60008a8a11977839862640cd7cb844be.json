{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MrMuscle\\\\Desktop\\\\spotifyApp\\\\music-stat-app\\\\src\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport { Container, Form } from \"react-bootstrap\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport Player from \"./Player\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"441bca7af371439ca25719b57bef08b8\"\n});\nexport default function Dashboard({\n  code\n}) {\n  _s();\n\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [playingTrack, setPlayingTrack] = useState();\n  const [lyrics, setLyrics] = useState(\"\");\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch(\"\");\n    setSearch(\"\");\n  }\n\n  useEffect(() => {\n    if (!playingTrack) return;\n    axios.get(\"http://localhost:3001/lyrics\", {\n      params: {\n        track: playingTrack.title,\n        artist: playingTrack.artist\n      }\n    }).then(res => {\n      setLyrics(res.data.lyrics);\n    });\n  }, [playingTrack]);\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return;\n      setSearchResults(res.body.tracks.items.map(track => {\n        //find smallest image in track object\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    }); //cancels previous search request if new search request is made\n\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"d-flex flex-column py-2\",\n    style: {\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n      type: \"search\",\n      placeholder: \"Search Songs/Artists\",\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow-1 my-2\",\n      style: {\n        overflowY: \"auto\"\n      },\n      children: searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n        track: track,\n        chooseTrack: chooseTrack\n      }, track.uri, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), searchResults.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      style: {\n        whiteSpace: \"pre\"\n      },\n      children: lyrics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Player, {\n        accessToken: accessToken,\n        trackUri: playingTrack === null || playingTrack === void 0 ? void 0 : playingTrack.uri\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Dashboard, \"C/xkEiesDpJOEbcaLNXZ/RIs9iE=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/MrMuscle/Desktop/spotifyApp/music-stat-app/src/Dashboard.js"],"names":["useState","useEffect","useAuth","Container","Form","SpotifyWebApi","TrackSearchResult","Player","axios","spotifyApi","clientId","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","playingTrack","setPlayingTrack","lyrics","setLyrics","chooseTrack","track","get","params","title","artist","then","res","data","setAccessToken","cancel","searchTracks","body","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artists","name","uri","albumUrl","url","e","target","value","overflowY","length","whiteSpace"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport useAuth from \"./useAuth\"\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport TrackSearchResult from \"./TrackSearchResult\";\r\nimport Player from \"./Player\";\r\nimport axios from \"axios\"\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n    clientId: \"441bca7af371439ca25719b57bef08b8\",\r\n})\r\n\r\nexport default function Dashboard({code}) {\r\n    const accessToken = useAuth(code)\r\n    const [search, setSearch] = useState(\"\")\r\n    const [searchResults, setSearchResults] = useState([])\r\n    const [playingTrack, setPlayingTrack] = useState()\r\n    const [lyrics, setLyrics] = useState(\"\")\r\n\r\n\r\n    function chooseTrack(track){\r\n        setPlayingTrack(track)\r\n        setSearch(\"\")\r\n        setSearch(\"\")\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(!playingTrack) return\r\n        axios.get(\"http://localhost:3001/lyrics\", {\r\n            params: {\r\n            track: playingTrack.title,\r\n            artist: playingTrack.artist,\r\n            },\r\n        })\r\n        .then(res => {\r\n            setLyrics(res.data.lyrics)\r\n        })\r\n    }, [playingTrack])\r\n\r\n    useEffect(() => {\r\n        if (!accessToken) return\r\n        spotifyApi.setAccessToken(accessToken)\r\n    }, [accessToken])\r\n\r\n    useEffect(() => {\r\n        if (!search) return setSearchResults([])\r\n        if (!accessToken) return\r\n\r\n        let cancel = false\r\n        spotifyApi.searchTracks(search).then(res => {\r\n            if (cancel) return\r\n            setSearchResults(res.body.tracks.items.map(track => {\r\n                //find smallest image in track object\r\n                const smallestAlbumImage = track.album.images.reduce(\r\n                    (smallest, image) => {\r\n                      if (image.height < smallest.height) return image\r\n                      return smallest\r\n                    },track.album.images[0]\r\n                )\r\n                return {\r\n                    artist: track.artists[0].name,\r\n                    title: track.name,\r\n                    uri: track.uri,\r\n                    albumUrl: smallestAlbumImage.url\r\n                }\r\n            }))\r\n        })\r\n        //cancels previous search request if new search request is made\r\n        return () => cancel = true\r\n    }, [search, accessToken])\r\n    \r\n    return(\r\n        <Container className=\"d-flex flex-column py-2\" style={{height: \"100vh\"}}>\r\n            <Form.Control type=\"search\" placeholder=\"Search Songs/Artists\" value={search} onChange={ e => setSearch(e.target.value)}\r\n            />\r\n            <div className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\r\n                {searchResults.map(track => (\r\n                    <TrackSearchResult track={track} key={track.uri} chooseTrack={chooseTrack} />\r\n                ))}\r\n            </div>\r\n            {searchResults.length === 0 && (\r\n                <div className=\"text-center\" style={{ whiteSpace: \"pre\" }}>\r\n                    {lyrics}\r\n                </div>\r\n            )}\r\n            <div><Player accessToken={accessToken} trackUri={playingTrack?.uri}/></div>\r\n        \r\n        </Container>\r\n    )\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}